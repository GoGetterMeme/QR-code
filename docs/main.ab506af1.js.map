{"version":3,"sources":["js/card.js","js/burger.js","js/serial.js","js/device.js","js/modal.js","js/web3entry.js","main.js"],"names":["cardData","id","name","image","price","burgerComponent","document","addEventListener","$navbarBurgers","Array","prototype","slice","call","querySelectorAll","length","forEach","el","target","dataset","$target","getElementById","classList","toggle","serial","serialComponent","getPorts","navigator","usb","getDevices","then","devices","map","device","Port","requestPort","requestDevice","filters","device_","interfaceNumber_","endpointIn_","endpointOut_","connect","open","configuration","selectConfiguration","interfaces","element","alternates","elementalt","interfaceClass","interfaceNumber","endpoints","elementendpoint","direction","endpointNumber","claimInterface","selectAlternateInterface","controlTransferOut","readLoop","transferIn","result","onReceive","data","error","onReceiveError","disconnect","close","send","transferOut","port","deviceComponent","event","connectButton","querySelector","console","log","productName","textContent","textDecoder","TextDecoder","t","io","print","decode","selectedPort","catch","ports","withdrawFruit","str","undefined","textEncoder","TextEncoder","encode","BulmaModal","amountToPay","selector","elem","close_data","on_show","on_close","modalClose","that","e","Event","dispatchEvent","callback","modalComponent","mdl","item","show","getAttribute","getElementsByClassName","innerText","src","Number","parseFloat","ethPrice","toPrecision","web3","Web3","aggregatorV3InterfaceABI","addr","priceFeed","eth","Contract","web3entryComponent","methods","getLatestPrice","events","Received","receivedAmount","returnValues","innerHTML","Vue"],"mappings":"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","file":"main.ab506af1.js","sourceRoot":"..\\src","sourcesContent":["const cardData = [{\r\n    id: 0,\r\n    name: 'Strawberry',\r\n    image: '028-strawberry.png',\r\n    price: 1,\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'Banana',\r\n    image: '006-bananas.png',\r\n    price: 2,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Pear',\r\n    image: '024-pear.png',\r\n    price: 2,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Dragon Fruit',\r\n    image: '015-dragon fruit.png',\r\n    price: 7,\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Orange',\r\n    image: '022-orange.png',\r\n    price: 1,\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Mango',\r\n    image: '021-mango.png',\r\n    price: 5,\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Lemon',\r\n    image: '020-lemon.png',\r\n    price: 1,\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Watermelon',\r\n    image: '030-watermelon.png',\r\n    price: 2,\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Berry',\r\n    image: '008-berry.png',\r\n    price: 2,\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Pomegranate',\r\n    image: '025-pomegranate.png',\r\n    price: 3,\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Blueberry',\r\n    image: '009-blueberry.png',\r\n    price: 2,\r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'Rose Apple',\r\n    image: '027-rose apple.png',\r\n    price: 4,\r\n  }\r\n  ]\r\n  \r\n export { cardData }","export function burgerComponent(){\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        // Get all \"navbar-burger\" elements\r\n        const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);\r\n    \r\n        // Check if there are any navbar burgers\r\n        if ($navbarBurgers.length > 0) {\r\n    \r\n            // Add a click event on each of them\r\n            $navbarBurgers.forEach(el => {\r\n                el.addEventListener('click', () => {\r\n    \r\n                    // Get the target from the \"data-target\" attribute\r\n                    const target = el.dataset.target;\r\n                    const $target = document.getElementById(target);\r\n    \r\n                    // Toggle the \"is-active\" class on both the \"navbar-burger\" and the \"navbar-menu\"\r\n                    el.classList.toggle('is-active');\r\n                    $target.classList.toggle('is-active');\r\n    \r\n                });\r\n            });\r\n        }\r\n    });\r\n}","export var serial = {};\r\n\r\nexport function serialComponent() {\r\n  'use strict';\r\n\r\n  serial.getPorts = function () {\r\n      return navigator.usb.getDevices().then(devices => {\r\n          return devices.map(device => new serial.Port(device));\r\n      });\r\n  };\r\n\r\n  serial.requestPort = function () {\r\n      const filters = [\r\n          { 'vendorId': 0x2341, 'productId': 0x8036 }, // Arduino Leonardo\r\n          { 'vendorId': 0x2341, 'productId': 0x8037 }, // Arduino Micro\r\n          { 'vendorId': 0x2341, 'productId': 0x804d }, // Arduino/Genuino Zero\r\n          { 'vendorId': 0x2341, 'productId': 0x804e }, // Arduino/Genuino MKR1000\r\n          { 'vendorId': 0x2341, 'productId': 0x804f }, // Arduino MKRZERO\r\n          { 'vendorId': 0x2341, 'productId': 0x8050 }, // Arduino MKR FOX 1200\r\n          { 'vendorId': 0x2341, 'productId': 0x8052 }, // Arduino MKR GSM 1400\r\n          { 'vendorId': 0x2341, 'productId': 0x8053 }, // Arduino MKR WAN 1300\r\n          { 'vendorId': 0x2341, 'productId': 0x8054 }, // Arduino MKR WiFi 1010\r\n          { 'vendorId': 0x2341, 'productId': 0x8055 }, // Arduino MKR NB 1500\r\n          { 'vendorId': 0x2341, 'productId': 0x8056 }, // Arduino MKR Vidor 4000\r\n          { 'vendorId': 0x2341, 'productId': 0x8057 }, // Arduino NANO 33 IoT\r\n          { 'vendorId': 0x1A86, 'productId': 0x7523 }, // ESP8266\r\n          { 'vendorId': 0x10C4, 'productId': 0xEA60 }, // ESP32\r\n          { 'vendorId': 0x239A }, // Adafruit Boards!\r\n      ];\r\n      return navigator.usb.requestDevice({ 'filters': filters }).then(\r\n          device => new serial.Port(device)\r\n      );\r\n  }\r\n\r\n  serial.Port = function (device) {\r\n      this.device_ = device;\r\n      this.interfaceNumber_ = 2;  // original interface number of WebUSB Arduino demo\r\n      this.endpointIn_ = 5;       // original in endpoint ID of WebUSB Arduino demo\r\n      this.endpointOut_ = 4;      // original out endpoint ID of WebUSB Arduino demo\r\n  };\r\n\r\n  serial.Port.prototype.connect = function () {\r\n      let readLoop = () => {\r\n          this.device_.transferIn(this.endpointIn_, 64).then(result => {\r\n              this.onReceive(result.data);\r\n              readLoop();\r\n          }, error => {\r\n              this.onReceiveError(error);\r\n          });\r\n      };\r\n\r\n      return this.device_.open()\r\n          .then(() => {\r\n              if (this.device_.configuration === null) {\r\n                  return this.device_.selectConfiguration(1);\r\n              }\r\n          })\r\n          .then(() => {\r\n              var configurationInterfaces = this.device_.configuration.interfaces;\r\n              configurationInterfaces.forEach(element => {\r\n                  element.alternates.forEach(elementalt => {\r\n                      if (elementalt.interfaceClass == 0xff) {\r\n                          this.interfaceNumber_ = element.interfaceNumber;\r\n                          elementalt.endpoints.forEach(elementendpoint => {\r\n                              if (elementendpoint.direction == \"out\") {\r\n                                  this.endpointOut_ = elementendpoint.endpointNumber;\r\n                              }\r\n                              if (elementendpoint.direction == \"in\") {\r\n                                  this.endpointIn_ = elementendpoint.endpointNumber;\r\n                              }\r\n                          })\r\n                      }\r\n                  })\r\n              })\r\n          })\r\n          .then(() => this.device_.claimInterface(this.interfaceNumber_))\r\n          .then(() => this.device_.selectAlternateInterface(this.interfaceNumber_, 0))\r\n          .then(() => this.device_.controlTransferOut({\r\n              'requestType': 'class',\r\n              'recipient': 'interface',\r\n              'request': 0x22,\r\n              'value': 0x01,\r\n              'index': this.interfaceNumber_\r\n          }))\r\n          .then(() => {\r\n              readLoop();\r\n          });\r\n  };\r\n\r\n  serial.Port.prototype.disconnect = function () {\r\n      return this.device_.controlTransferOut({\r\n          'requestType': 'class',\r\n          'recipient': 'interface',\r\n          'request': 0x22,\r\n          'value': 0x00,\r\n          'index': this.interfaceNumber_\r\n      })\r\n          .then(() => this.device_.close());\r\n  };\r\n\r\n  serial.Port.prototype.send = function (data) {\r\n      return this.device_.transferOut(this.endpointOut_, data);\r\n  };\r\n}","import { serial } from './serial'\r\n\r\nvar port;\r\n\r\nexport function deviceComponent() {\r\n  'use strict';\r\n\r\n  document.addEventListener('DOMContentLoaded', event => {\r\n    let connectButton = document.querySelector('#connect');\r\n\r\n    function connect() {\r\n      console.log('Connecting to ' + port.device_.productName + '...');\r\n      port.connect().then(() => {\r\n        console.log(port);\r\n        console.log('Connected.');\r\n        connectButton.textContent = 'Disconnect Device';\r\n        port.onReceive = data => {\r\n          let textDecoder = new TextDecoder();\r\n          t.io.print(textDecoder.decode(data));\r\n        }\r\n        port.onReceiveError = error => {\r\n          console.log('Receive error: ' + error);\r\n        };\r\n      }, error => {\r\n        console.log('Connection error: ' + error);\r\n      });\r\n    };\r\n\r\n    connectButton.addEventListener('click', function () {\r\n      if (port) {\r\n        port.disconnect();\r\n        connectButton.textContent = 'Connect Device';\r\n        port = null;\r\n      } else {\r\n        serial.requestPort().then(selectedPort => {\r\n          port = selectedPort;\r\n          connect();\r\n        }).catch(error => {\r\n          console.log('Connection error: ' + error);\r\n        });\r\n      }\r\n    });\r\n\r\n    serial.getPorts().then(ports => {\r\n      if (ports.length == 0) {\r\n        console.log('No devices found.');\r\n      } else {\r\n        port = ports[0];\r\n        connect();\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function withdrawFruit(str) {\r\n  if (port !== undefined) {\r\n    let textEncoder = new TextEncoder();\r\n    port.send(textEncoder.encode(str)).catch(error => {\r\n      console.log('Send error: ' + error);\r\n    });\r\n  }\r\n}","import { ethPrice } from './web3entry'\r\n\r\nclass BulmaModal {\r\n    constructor(selector) {\r\n        this.elem = document.querySelector(selector)\r\n        this.close_data()\r\n    }\r\n\r\n    show() {\r\n        this.elem.classList.toggle('is-active')\r\n        this.on_show()\r\n    }\r\n\r\n    close() {\r\n        this.elem.classList.toggle('is-active')\r\n        this.on_close()\r\n    }\r\n\r\n    close_data() {\r\n        var modalClose = this.elem.querySelectorAll(\"[data-bulma-modal='close']\")\r\n        var that = this\r\n        modalClose.forEach(function (e) {\r\n            e.addEventListener(\"click\", function () {\r\n\r\n                that.elem.classList.toggle('is-active')\r\n\r\n                var event = new Event('modal:close')\r\n\r\n                that.elem.dispatchEvent(event);\r\n            })\r\n        })\r\n    }\r\n\r\n    on_show() {\r\n        var event = new Event('modal:show')\r\n\r\n        this.elem.dispatchEvent(event);\r\n    }\r\n\r\n    on_close() {\r\n        var event = new Event('modal:close')\r\n\r\n        this.elem.dispatchEvent(event);\r\n    }\r\n\r\n    addEventListener(event, callback) {\r\n        this.elem.addEventListener(event, callback)\r\n    }\r\n}\r\n\r\nexport let amountToPay;\r\n\r\nexport function modalComponent() {\r\n    var mdl = new BulmaModal(\"#myModal\")\r\n\r\n    document.querySelectorAll('.card-content').forEach(item => {\r\n        item.addEventListener('click', event => {\r\n            mdl.show()\r\n            console.log(item);\r\n            let name = item.getAttribute(\"name\");\r\n            console.log(name);\r\n            document.getElementsByClassName(\"modal-card-title\")[0].innerText = name;\r\n            let image = item.getAttribute(\"data-img\");\r\n            console.log(image);\r\n            document.getElementById(\"fimg\").src = image;\r\n            let price = item.getAttribute(\"data-price\");\r\n            amountToPay = Number.parseFloat(price / ethPrice).toPrecision(2);\r\n            document.getElementById(\"fruit-price\").innerText = 'COST $' + price + ' - PAY ' + amountToPay + ' ETH';\r\n        })\r\n    })\r\n\r\n    mdl.addEventListener('modal:show', function () {\r\n        console.log(\"opened\")\r\n    })\r\n\r\n    mdl.addEventListener(\"modal:close\", function () {\r\n        console.log(\"closed\")\r\n    })\r\n}\r\n","import { withdrawFruit } from './device'\r\nimport { amountToPay } from './modal'\r\n\r\n// Change this to use your own infura ID\r\nconst web3 = new Web3(`wss://kovan.infura.io/ws/v3/${process.env.APIKEY}`);\r\n\r\n// AggregatorV3Interface ABI\r\nconst aggregatorV3InterfaceABI =\r\n    [\r\n        {\r\n            \"inputs\": [],\r\n            \"stateMutability\": \"nonpayable\",\r\n            \"type\": \"constructor\"\r\n          },\r\n          {\r\n            \"anonymous\": false,\r\n            \"inputs\": [\r\n              {\r\n                \"indexed\": false,\r\n                \"internalType\": \"address\",\r\n                \"name\": \"\",\r\n                \"type\": \"address\"\r\n              },\r\n              {\r\n                \"indexed\": false,\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"\",\r\n                \"type\": \"uint256\"\r\n              }\r\n            ],\r\n            \"name\": \"Received\",\r\n            \"type\": \"event\"\r\n          },\r\n          {\r\n            \"inputs\": [],\r\n            \"name\": \"getLatestPrice\",\r\n            \"outputs\": [\r\n              {\r\n                \"internalType\": \"int256\",\r\n                \"name\": \"\",\r\n                \"type\": \"int256\"\r\n              }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n          },\r\n          {\r\n            \"stateMutability\": \"payable\",\r\n            \"type\": \"receive\"\r\n          }\r\n    ]\r\n\r\n// Price Feed Address\r\nconst addr = \"0xf506771A3FB4386CC192ffF6B8534cDF084c3a6B\";\r\ndocument.getElementById(\"address\").innerText = addr;\r\n\r\n// Set up contract instance\r\nconst priceFeed = new web3.eth.Contract(aggregatorV3InterfaceABI, addr);\r\n\r\nexport let ethPrice;\r\n\r\nexport function web3entryComponent() {\r\n    //Make call to latestRoundData()\r\n    priceFeed.methods.getLatestPrice().call()\r\n        .then((price) => {\r\n            // Do something with roundData\r\n            ethPrice = price / 1.e8;\r\n            console.log(\"Ethereum Price: \", price / 1.e8)\r\n        });\r\n\r\n    priceFeed.events.Received((error, event) => {\r\n        if (event) {\r\n            let receivedAmount = event.returnValues[1];\r\n            console.log(receivedAmount);\r\n            console.log(amountToPay * 1e18);\r\n            if (receivedAmount >= amountToPay * 1e18) {\r\n                withdrawFruit('H');\r\n                document.getElementsByClassName(\"modal-card-body\")[0].innerHTML = `\r\n        <center>\r\n        <div class=\"columns is-vcentered has-background-primary\">\r\n            <div class=\"column\">\r\n                <strong class=\"has-text-black\">\r\n                Payment Succeeded\r\n                </strong>\r\n                <br>\r\n            </div>\r\n        </div>\r\n        <div class=\"columns is-vcentered\">\r\n            <div class=\"column\">\r\n                <figure class=\"image is-128x128\">\r\n                <img src=\"basket.png\" alt=\"\">\r\n                </figure>\r\n            </div>\r\n        </div>\r\n        <div class=\"columns is-vcentered has-background-info-light\">\r\n            <div class=\"column\">\r\n               <strong class=\"has-text-black\">You can now withdraw your purchase</strong> \r\n            </div>\r\n        </div>\r\n\r\n    </center>\r\n        `;\r\n            } else {\r\n                document.getElementsByClassName(\"modal-card-body\")[0].innerHTML = `\r\n        <center>\r\n        <div class=\"columns is-vcentered has-background-danger\">\r\n            <div class=\"column\">\r\n                <strong class=\"has-text-black\">\r\n                Failed to proceed: Insufficient funds sent\r\n                </strong>\r\n                <br>\r\n            </div>\r\n        </div>\r\n        <div class=\"columns is-vcentered\">\r\n            <div class=\"column\">\r\n                <figure class=\"image is-128x128\">\r\n                <img src=\"cashier.png\" alt=\"\">\r\n                </figure>\r\n            </div>\r\n        </div>\r\n        <div class=\"columns is-vcentered has-background-info-light\">\r\n            <div class=\"column\">\r\n               <strong class=\"has-text-black\">Please remake your purchase</strong> \r\n            </div>\r\n        </div>\r\n\r\n    </center>\r\n        `;\r\n            }\r\n        }\r\n    });\r\n}","import { cardData } from './js/card'\r\nimport { burgerComponent } from './js/burger'\r\nimport { web3entryComponent } from './js/web3entry'\r\nimport { modalComponent } from './js/modal'\r\nimport { serialComponent } from './js/serial'\r\nimport { deviceComponent } from './js/device'\r\n\r\nnew Vue({\r\n    el: '#app',\r\n    data: {\r\n        cardData\r\n    }\r\n})\r\n\r\n/* Handles the navbar's hamburger for a small screen host. */\r\nburgerComponent();\r\n\r\n/* Establishes the communication with an Ethereum node. */\r\nweb3entryComponent();\r\n\r\n/* Handles the fruit's modal. */\r\nmodalComponent();\r\n\r\n/* Manages the USB Serial communication between the host and the device. */\r\nserialComponent();\r\n\r\n/* Handles the device interaction. */\r\ndeviceComponent();\r\n"]}