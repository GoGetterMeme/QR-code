{"version":3,"sources":["js/arduino.js"],"names":["port","document","addEventListener","event","connectButton","querySelector","connect","console","log","device_","productName","then","textContent","onReceive","data","textDecoder","TextDecoder","t","io","print","decode","onReceiveError","error","disconnect","serial","requestPort","selectedPort","catch","getPorts","ports","length","withdrawFruit","str","undefined","textEncoder","TextEncoder","send","encode"],"mappings":"AAAA,IAAIA,IAAJ;;AAEA,CAAC,YAAW;AACR;;AAEAC,EAAAA,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,UAAAC,KAAK,EAAI;AACrD,QAAIC,aAAa,GAAGH,QAAQ,CAACI,aAAT,CAAuB,UAAvB,CAApB;;AAEA,aAASC,OAAT,GAAmB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBR,IAAI,CAACS,OAAL,CAAaC,WAAhC,GAA8C,KAA1D;AACAV,MAAAA,IAAI,CAACM,OAAL,GAAeK,IAAf,CAAoB,YAAM;AACxBJ,QAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAJ,QAAAA,aAAa,CAACQ,WAAd,GAA4B,mBAA5B;;AACAZ,QAAAA,IAAI,CAACa,SAAL,GAAiB,UAAAC,IAAI,EAAI;AACvB,cAAIC,WAAW,GAAG,IAAIC,WAAJ,EAAlB;AACAC,UAAAA,CAAC,CAACC,EAAF,CAAKC,KAAL,CAAWJ,WAAW,CAACK,MAAZ,CAAmBN,IAAnB,CAAX;AACD,SAHD;;AAIAd,QAAAA,IAAI,CAACqB,cAAL,GAAsB,UAAAC,KAAK,EAAI;AAC7Bf,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBc,KAAhC;AACD,SAFD;AAGD,OAXD,EAWG,UAAAA,KAAK,EAAI;AACVf,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBc,KAAnC;AACD,OAbD;AAcD;;AAAA;AAEDlB,IAAAA,aAAa,CAACF,gBAAd,CAA+B,OAA/B,EAAwC,YAAW;AACjD,UAAIF,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACuB,UAAL;AACAnB,QAAAA,aAAa,CAACQ,WAAd,GAA4B,gBAA5B;AACAZ,QAAAA,IAAI,GAAG,IAAP;AACD,OAJD,MAIO;AACLwB,QAAAA,MAAM,CAACC,WAAP,GAAqBd,IAArB,CAA0B,UAAAe,YAAY,EAAI;AACxC1B,UAAAA,IAAI,GAAG0B,YAAP;AACApB,UAAAA,OAAO;AACR,SAHD,EAGGqB,KAHH,CAGS,UAAAL,KAAK,EAAI;AAChBf,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBc,KAAnC;AACD,SALD;AAMD;AACF,KAbD;AAeAE,IAAAA,MAAM,CAACI,QAAP,GAAkBjB,IAAlB,CAAuB,UAAAkB,KAAK,EAAI;AAC9B,UAAIA,KAAK,CAACC,MAAN,IAAgB,CAApB,EAAuB;AACrBvB,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,OAFD,MAEO;AACLR,QAAAA,IAAI,GAAG6B,KAAK,CAAC,CAAD,CAAZ;AACAvB,QAAAA,OAAO;AACR;AACF,KAPD;AAQD,GA5CD;AA6CD,CAhDH;;AAkDE,SAASyB,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,MAAIhC,IAAI,KAAKiC,SAAb,EAAwB;AACpB,QAAIC,WAAW,GAAG,IAAIC,WAAJ,EAAlB;AACAnC,IAAAA,IAAI,CAACoC,IAAL,CAAUF,WAAW,CAACG,MAAZ,CAAmBL,GAAnB,CAAV,EAAmCL,KAAnC,CAAyC,UAAAL,KAAK,EAAI;AAChDf,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBc,KAA7B;AACD,KAFD;AAGD;AACJ","file":"arduino.6f823695.js","sourceRoot":"../src","sourcesContent":["var port;\n\n(function() {\n    'use strict';\n    \n    document.addEventListener('DOMContentLoaded', event => {\n      let connectButton = document.querySelector('#connect');\n  \n      function connect() {\n        console.log('Connecting to ' + port.device_.productName + '...');\n        port.connect().then(() => {\n          console.log(port);\n          console.log('Connected.');\n          connectButton.textContent = 'Disconnect Device';\n          port.onReceive = data => {\n            let textDecoder = new TextDecoder();\n            t.io.print(textDecoder.decode(data));\n          }\n          port.onReceiveError = error => {\n            console.log('Receive error: ' + error);\n          };\n        }, error => {\n          console.log('Connection error: ' + error);\n        });\n      };\n  \n      connectButton.addEventListener('click', function() {\n        if (port) {\n          port.disconnect();\n          connectButton.textContent = 'Connect Device';\n          port = null;\n        } else {\n          serial.requestPort().then(selectedPort => {\n            port = selectedPort;\n            connect();\n          }).catch(error => {\n            console.log('Connection error: ' + error);\n          });\n        }\n      });\n  \n      serial.getPorts().then(ports => {\n        if (ports.length == 0) {\n          console.log('No devices found.');\n        } else {\n          port = ports[0];\n          connect();\n        }\n      });\n    });\n  })();\n  \n  function withdrawFruit(str) {\n    if (port !== undefined) {\n        let textEncoder = new TextEncoder();\n        port.send(textEncoder.encode(str)).catch(error => {\n          console.log('Send error: ' + error);\n        });\n      }\n  }"]}