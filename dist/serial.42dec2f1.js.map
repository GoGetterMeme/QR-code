{"version":3,"sources":["js/serial.js"],"names":["serial","getPorts","navigator","usb","getDevices","then","devices","map","device","Port","requestPort","filters","requestDevice","device_","interfaceNumber_","endpointIn_","endpointOut_","prototype","connect","readLoop","transferIn","result","onReceive","data","error","onReceiveError","open","configuration","selectConfiguration","configurationInterfaces","interfaces","forEach","element","alternates","elementalt","interfaceClass","interfaceNumber","endpoints","elementendpoint","direction","endpointNumber","claimInterface","selectAlternateInterface","controlTransferOut","disconnect","close","send","transferOut"],"mappings":"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","file":"serial.42dec2f1.js","sourceRoot":"../src","sourcesContent":["var serial = {};\n\n(function() {\n  'use strict';\n\n  serial.getPorts = function() {\n    return navigator.usb.getDevices().then(devices => {\n      return devices.map(device => new serial.Port(device));\n    });\n  };\n\n  serial.requestPort = function() {\n    const filters = [\n      { 'vendorId': 0x2341, 'productId': 0x8036 }, // Arduino Leonardo\n      { 'vendorId': 0x2341, 'productId': 0x8037 }, // Arduino Micro\n      { 'vendorId': 0x2341, 'productId': 0x804d }, // Arduino/Genuino Zero\n      { 'vendorId': 0x2341, 'productId': 0x804e }, // Arduino/Genuino MKR1000\n      { 'vendorId': 0x2341, 'productId': 0x804f }, // Arduino MKRZERO\n      { 'vendorId': 0x2341, 'productId': 0x8050 }, // Arduino MKR FOX 1200\n      { 'vendorId': 0x2341, 'productId': 0x8052 }, // Arduino MKR GSM 1400\n      { 'vendorId': 0x2341, 'productId': 0x8053 }, // Arduino MKR WAN 1300\n      { 'vendorId': 0x2341, 'productId': 0x8054 }, // Arduino MKR WiFi 1010\n      { 'vendorId': 0x2341, 'productId': 0x8055 }, // Arduino MKR NB 1500\n      { 'vendorId': 0x2341, 'productId': 0x8056 }, // Arduino MKR Vidor 4000\n      { 'vendorId': 0x2341, 'productId': 0x8057 }, // Arduino NANO 33 IoT\n      { 'vendorId': 0x1A86, 'productId': 0x7523 }, // ESP8266\n      { 'vendorId': 0x10C4, 'productId': 0xEA60 }, // ESP32\n      { 'vendorId': 0x239A }, // Adafruit Boards!\n    ];\n    return navigator.usb.requestDevice({ 'filters': filters }).then(\n      device => new serial.Port(device)\n    );\n  }\n\n  serial.Port = function(device) {\n    this.device_ = device;\n    this.interfaceNumber_ = 2;  // original interface number of WebUSB Arduino demo\n    this.endpointIn_ = 5;       // original in endpoint ID of WebUSB Arduino demo\n    this.endpointOut_ = 4;      // original out endpoint ID of WebUSB Arduino demo\n  };\n\n  serial.Port.prototype.connect = function() {\n    let readLoop = () => {\n      this.device_.transferIn(this.endpointIn_, 64).then(result => {\n        this.onReceive(result.data);\n        readLoop();\n      }, error => {\n        this.onReceiveError(error);\n      });\n    };\n\n    return this.device_.open()\n        .then(() => {\n          if (this.device_.configuration === null) {\n            return this.device_.selectConfiguration(1);\n          }\n        })\n        .then(() => {\n          var configurationInterfaces = this.device_.configuration.interfaces;\n          configurationInterfaces.forEach(element => {\n            element.alternates.forEach(elementalt => {\n              if (elementalt.interfaceClass==0xff) {\n                this.interfaceNumber_ = element.interfaceNumber;\n                elementalt.endpoints.forEach(elementendpoint => {\n                  if (elementendpoint.direction == \"out\") {\n                    this.endpointOut_ = elementendpoint.endpointNumber;\n                  }\n                  if (elementendpoint.direction==\"in\") {\n                    this.endpointIn_ =elementendpoint.endpointNumber;\n                  }\n                })\n              }\n            })\n          })\n        })\n        .then(() => this.device_.claimInterface(this.interfaceNumber_))\n        .then(() => this.device_.selectAlternateInterface(this.interfaceNumber_, 0))\n        .then(() => this.device_.controlTransferOut({\n            'requestType': 'class',\n            'recipient': 'interface',\n            'request': 0x22,\n            'value': 0x01,\n            'index': this.interfaceNumber_}))\n        .then(() => {\n          readLoop();\n        });\n  };\n\n  serial.Port.prototype.disconnect = function() {\n    return this.device_.controlTransferOut({\n            'requestType': 'class',\n            'recipient': 'interface',\n            'request': 0x22,\n            'value': 0x00,\n            'index': this.interfaceNumber_})\n        .then(() => this.device_.close());\n  };\n\n  serial.Port.prototype.send = function(data) {\n    return this.device_.transferOut(this.endpointOut_, data);\n  };\n})();\n"]}